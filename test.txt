function Create_vSwitch {
    # Prompt the user for virtual switch and port group names
    $vSwitchName = Read-Host "Please enter the name for the new virtual switch"
    $portGroupName = Read-Host "Please enter the name for the new port group"

    try {
        Write-Host "Creating virtual switch: $vSwitchName"
        Write-Host "Creating port group: $portGroupName"

        # Create the virtual switch on the specified host
        New-VirtualSwitch -VMHost '192.168.7.20' -Name $vSwitchName

        # Create the port group on the newly created virtual switch
        Get-VMHost '192.168.7.20' | Get-VirtualSwitch -Name $vSwitchName | New-VirtualPortGroup -Name $portGroupName

        Write-Host "Successfully created $vSwitchName and $portGroupName."
    }
    catch {
        Write-Host "Error with virtual switch and port group creation: $_"
        exit
    }
}



function Get-IP {
    # Prompt user for the virtual machine name
    $vmName = Read-Host -Prompt "Enter the name of the VM you wish to get the IP of"
    
    # Check if the input is valid
    if ([string]::IsNullOrWhiteSpace($vmName)) {
        Write-Host "You must enter a valid VM name. Please try again."
        return
    }

    try {
        # Retrieve virtual machine information
        $vmInfo = Get-VM -Name $vmName
        if ($null -eq $vmInfo) {
            Write-Host "No VM found by the name $vmName"
            return
        }

        # Display basic VM info and IP address
        $vmInfo | Select-Object Name, @{N="IP Address";E={@($_.Guest.IPAddress[0])}} | Format-Table -AutoSize

        # Get and display network adapter details
        Get-NetworkAdapter -VM $vmInfo | Format-Table Name, NetworkName, MACAddress, ConnectionState -AutoSize
    }
    catch {
        Write-Host "Failed to retrieve IP information: $_"
    }
}



function ManageVM {
    # Prompt user for the virtual machine name
    $vmName = Read-Host -Prompt "Enter the name of the VM you wish to manage"
    
    # Check if the input is valid
    if ([string]::IsNullOrWhiteSpace($vmName)) {
        Write-Host "You must enter a valid VM name. Please try again."
        return
    }

    # Get the VM object
    $vm = Get-VM -Name $vmName
    if ($null -eq $vm) {
        Write-Host "No VM found by the name $vmName"
        return
    }

    # Prompt user for action to perform on the VM
    $action = Read-Host -Prompt "Do you want to (Status, Start, Stop) the VM? Enter Status, Start or Stop"

    # Perform the requested action
    switch ($action) {
        'Status' {
            $vm | Select-Object Name, PowerState, VMHost, NumCpu, MemoryMB, UsedSpaceGB | Format-Table -AutoSize
        }
        'Start' {
            try {
                Start-VM -VM $vm -Confirm:$false
                Write-Host "VM is starting..."
            }
            catch {
                Write-Host "Failed to start VM: $_"
            }
        }
        'Stop' {
            try {
                Stop-VM -VM $vm -Confirm:$false
                Write-Host "VM is stopping..."
            }
            catch {
                Write-Host "Failed to stop VM: $_"
            }
        }
        default {
            Write-Host "Invalid action selected. Please enter either Status, Start, or Stop."
        }
    }
}





function Set-VMNetwork {
    # Prompt user for the virtual machine name
    $vmName = Read-Host -Prompt "Enter the name of the virtual machine you would like to select"

    # Check if the input is valid
    if ([string]::IsNullOrWhiteSpace($vmName)) {
        Write-Host "You must enter a valid VM name. Please try again."
        return
    }

    # Get the VM object
    $vm = Get-VM -Name $vmName
    if ($null -eq $vm) {
        Write-Host "No VM found by the name $vmName"
        return
    }

    # List available networks
    Write-Host "Available networks:"
    Get-VirtualNetwork | Format-Table Name -AutoSize

    # Prompt user for the network name
    $networkName = Read-Host -Prompt "Enter the name of the network you would like to select"

    # Check if the network input is valid
    if ([string]::IsNullOrWhiteSpace($networkName)) {
        Write-Host "You must enter a valid network name. Please try again."
        return
    }

    # Get the network object to confirm it exists
    $network = Get-VirtualNetwork | Where-Object {$_.Name -eq $networkName}
    if ($null -eq $network) {
        Write-Host "No network found by the name $networkName"
        return
    }

    # Set the network adapter to the specified network
    try {
        Get-NetworkAdapter -VM $vm | Set-NetworkAdapter -NetworkName $networkName -Confirm:$false
        Write-Host "Network adapter of VM '$vmName' successfully set to '$networkName'."
    }
    catch {
        Write-Host "Failed to set network adapter: $_"
    }
}



